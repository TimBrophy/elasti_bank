{
 "_meta": {
  "managed": true,
  "managed_by": "fleet",
  "package": {
   "name": "apm"
  }
 },
 "description": "Pipeline for ingesting APM trace events.",
 "processors": [
  {
   "grok": {
    "field": "observer.version",
    "pattern_definitions": {
     "DIGITS": "(?:[0-9]+)"
    },
    "patterns": [
     "%{DIGITS:observer.version_major:int}.%{DIGITS:observer.version_minor:int}.%{DIGITS:observer.version_patch:int}(?:[-+].*)?"
    ]
   }
  },
  {
   "fail": {
    "if": "ctx.observer.version_major \u003e 8 || (ctx.observer.version_major == 8 \u0026\u0026 ctx.observer.version_minor \u003e 7)",
    "message": "Document produced by APM Server v{{{observer.version}}}, which is newer than the installed APM integration (v8.7.0-preview-1678362302). The APM integration must be upgraded."
   }
  },
  {
   "remove": {
    "field": [
     "observer.version_major",
     "observer.version_minor",
     "observer.version_patch"
    ],
    "ignore_missing": true
   }
  },
  {
   "remove": {
    "field": [
     "observer.id",
     "observer.ephemeral_id"
    ],
    "ignore_failure": true,
    "ignore_missing": true
   }
  },
  {
   "remove": {
    "field": "ecs",
    "ignore_failure": true,
    "ignore_missing": true
   }
  },
  {
   "user_agent": {
    "field": "user_agent.original",
    "ignore_failure": true,
    "ignore_missing": true,
    "target_field": "user_agent"
   }
  },
  {
   "rename": {
    "field": "process.ppid",
    "ignore_failure": true,
    "ignore_missing": true,
    "target_field": "process.parent.pid"
   }
  },
  {
   "geoip": {
    "database_file": "GeoLite2-City.mmdb",
    "field": "client.ip",
    "ignore_missing": true,
    "on_failure": [
     {
      "remove": {
       "field": "client.ip",
       "ignore_failure": true,
       "ignore_missing": true
      }
     }
    ],
    "target_field": "client.geo"
   }
  },
  {
   "script": {
    "if": "ctx.processor?.event != null \u0026\u0026 ctx.get(ctx.processor.event) != null \u0026\u0026 ctx.get(ctx.processor.event)?.duration == null",
    "source": "def durationNanos = ctx.event?.duration ?: 0;\ndef eventType = ctx.processor.event;\nctx.get(ctx.processor.event).duration = [\"us\": (long)(durationNanos/1000)];"
   }
  },
  {
   "remove": {
    "field": "event.duration",
    "ignore_failure": true,
    "ignore_missing": true
   }
  },
  {
   "set": {
    "field": "event.success_count",
    "if": "ctx.event?.outcome == 'success'",
    "ignore_failure": true,
    "value": 1
   }
  },
  {
   "set": {
    "field": "event.success_count",
    "if": "ctx.event?.outcome == 'failure'",
    "ignore_failure": true,
    "value": 0
   }
  },
  {
   "remove": {
    "field": [
     "host",
     "process",
     "user",
     "user_agent",
     "container",
     "kubernetes",
     "service.node",
     "service.version",
     "service.language",
     "service.runtime",
     "service.framework"
    ],
    "if": "ctx.processor?.event == 'span'",
    "ignore_failure": true,
    "ignore_missing": true
   }
  },
  {
   "pipeline": {
    "ignore_missing_pipeline": true,
    "name": "traces-apm@custom"
   }
  }
 ]
}