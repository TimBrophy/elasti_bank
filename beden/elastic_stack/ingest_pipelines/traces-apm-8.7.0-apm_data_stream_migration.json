{
 "_meta": {
  "managed": true,
  "managed_by": "fleet",
  "package": {
   "name": "apm"
  }
 },
 "description": "Pipeline for migrating APM events from indices to data streams.\nThis pipeline is not used directly by apmserver; it is installed\nfor manually migrating legacy indices to data streams.\n",
 "processors": [
  {
   "grok": {
    "field": "observer.version",
    "pattern_definitions": {
     "DIGITS": "(?:[0-9]+)"
    },
    "patterns": [
     "%{DIGITS:observer.version_major:int}.%{DIGITS:observer.version_minor:int}.%{DIGITS:observer.version_patch:int}(?:[-+].*)?"
    ]
   }
  },
  {
   "fail": {
    "if": "ctx.observer.version_major \u003e 8 || (ctx.observer.version_major == 8 \u0026\u0026 ctx.observer.version_minor \u003e 7)",
    "message": "Document produced by APM Server v{{{observer.version}}}, which is newer than the installed APM integration (v8.7.0-preview-1678362302). The APM integration must be upgraded."
   }
  },
  {
   "remove": {
    "field": [
     "observer.version_major",
     "observer.version_minor",
     "observer.version_patch"
    ],
    "ignore_missing": true
   }
  },
  {
   "remove": {
    "field": [
     "observer.id",
     "observer.ephemeral_id"
    ],
    "ignore_failure": true,
    "ignore_missing": true
   }
  },
  {
   "remove": {
    "field": "ecs",
    "ignore_failure": true,
    "ignore_missing": true
   }
  },
  {
   "rename": {
    "field": "process.ppid",
    "ignore_failure": true,
    "ignore_missing": true,
    "target_field": "process.parent.pid"
   }
  },
  {
   "script": {
    "if": "ctx.processor?.event == 'span' || ctx.processor?.event == 'transaction'",
    "source": "ctx.data_stream = [\"type\": \"traces\", \"dataset\": \"apm\", \"namespace\": \"migrated\"]\n"
   }
  },
  {
   "script": {
    "if": "ctx.processor?.event == 'error'",
    "source": "ctx.data_stream = [\"type\": \"logs\", \"dataset\": \"apm.error\", \"namespace\": \"migrated\"]\n"
   }
  },
  {
   "script": {
    "if": "ctx.processor?.event == 'metric'",
    "source": "String dataset;\nif (ctx[\"metricset.name\"] != \"app\") {\n  dataset = \"apm.internal\";\n} else {\n  String serviceName = ctx.service.name;\n  serviceName = serviceName.toLowerCase();\n  serviceName = /[\\\\\\/*?\"\u003c\u003e| ,#:-]/.matcher(serviceName).replaceAll('_');\n  dataset = \"apm.app.\" + serviceName;\n}\nctx.data_stream = [\"type\": \"metrics\", \"dataset\": dataset, \"namespace\": \"migrated\"];\n"
   }
  },
  {
   "set": {
    "field": "_index",
    "if": "ctx.data_stream != null",
    "value": "{{data_stream.type}}-{{data_stream.dataset}}-{{data_stream.namespace}}"
   }
  },
  {
   "remove": {
    "field": "timeseries",
    "ignore_missing": true
   }
  }
 ]
}